#BlueJ class context
comment0.target=MeasuringSortingAlgorithms
comment0.text=\ Clase\ MeasuringSortingAlgorithms\:\ Estudio\ empirico\ de\ costes\ de\ \r\n\ \ los\ metodos\ de\ ordenacion.\r\n\ \ @author\ PRG\ -\ ETSInf\r\n\ \ @version\ Curso\ 2022-2023\r\n
comment1.params=
comment1.target=MeasuringSortingAlgorithms()
comment1.text=No\ hay\ objetos\ de\ esta\ clase.
comment2.params=t
comment2.target=int[]\ createArray(int)
comment2.text=\ Crea\ un\ array\ de\ int\ de\ talla\ t\ con\ valores\ a\ 0.\r\n\ \ @param\ t\ int,\ la\ talla.\r\n\ \ @result\ int[],\ el\ array\ generado.\r\n
comment3.params=a
comment3.target=void\ fillArrayRandom(int[])
comment3.text=\ Rellena\ los\ elementos\ de\ un\ array\ a\ de\ int\ \r\n\ \ con\ valores\ aleatorios\ entre\ 0\ y\ a.length-1.\r\n\ \ @param\ a\ int[],\ el\ array.\r\n
comment4.params=a
comment4.target=void\ fillArraySortedInAscendingOrder(int[])
comment4.text=\ Rellena\ los\ elementos\ de\ un\ array\ a\ de\ forma\ creciente,\r\n\ \ con\ valores\ desde\ 0\ hasta\ a.length-1.\r\n\ \ @param\ a\ int[],\ el\ array.\r\n
comment5.params=a
comment5.target=void\ fillArraySortedInDescendingOrder(int[])
comment5.text=\ Rellena\ los\ elementos\ de\ un\ array\ a\ de\ forma\ decreciente,\r\n\ \ con\ valores\ desde\ a.length-1\ hasta\ 0.\r\n\ \ @param\ a\ int[],\ el\ array.\r\n
comment6.params=
comment6.target=void\ measuringSelectionSort()
comment7.params=
comment7.target=void\ measuringInsertionSort()
comment8.params=
comment8.target=void\ help()
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\r\n\ public\ static\ void\ measuringMergeSort()\r\n\ \ \ \ {\ \r\n\ \ \ \ \ \ \ \ //\ To\ be\ completed\ by\ students\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ long\ ti\ \=\ 0,\ //\ Initial\ timestamp\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ tf\ \=\ 0,\ //\ Final\ timestamp\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ tt\ \=\ 0;\ //\ Total\ timestamp\r\n\ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ //\ Print\ result\ header\r\n\ \ \ \ \ \ \ \ System.out.printf(\ "\#\ MergeSort.\ Time\ in\ microseconds\\n"\ );\r\n\ \ \ \ \ \ \ \ System.out.printf(\ "\#\ \ \ \ \ Size\ \ \ \ \ \ Average\\n"\ );\r\n\ \ \ \ \ \ \ \ System.out.printf(\ "\#----------------------\\n"\ );\r\n\r\n\ \ \ \ \ \ \ \ //\ Este\ bucle\ repite\ el\ proceso\ para\ varias\ tallas\r\n\ \ \ \ \ \ \ \ for(\ int\ size\ \=\ 1;\ size\ <\=\ Math.pow(2,\ 19);\ size\ \=\ size\ *\ 2\ )\ {\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ //\ Create\ the\ array\r\n\ \ \ \ \ \ \ \ \ \ \ \ int[]\ a\ \=\ createRandomArray(\ size\ );\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (int\ r\ \=\ 0;\ r\ <\ REPETITIONS;\ r++)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ti\ \=\ System.nanoTime();\ \ \ \ \ \ //\ Initial\ timestamp\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ MeasurableAlgorithms.mergeSort(\ a,\ 0,\ a.length\ -\ 1\ );\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tf\ \=\ System.nanoTime();\ \ \ \ \ \ //\ Final\ timestamp\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tt\ +\=\ (tf\ -\ ti);\ \ \ \ \ \ \ \ \ \ \ \ \ //\ Lapse\ for\ this\ run\ is\ accumulated\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ //\ Average\ running\ time\ for\ the\ average\ case\r\n\ \ \ \ \ \ \ \ \ \ \ \ double\ averageTime\ \=\ (double)\ tt\ /\ REPETITIONS;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ //\ Print\ results\r\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.printf(\ Locale.US,\ "%10d\ %12.3f\\n",\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size,\ averageTime\ /\ NMS\ );\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\r\n
numComments=10
